// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  auth0Id      String   @unique @default("")
  name         String?  @db.VarChar(511)
  nickname     String?  @db.VarChar(511)
  image        String?  @db.VarChar(2048)
  subscription UserSubscription[]
  content      Content[]
  following    UserFollowed[] @relation("Following")
  followedBy   UserFollowed[] @relation("FollowedBy")
}

model Content {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(1023)
  author       User     @relation(fields: [authorId], references: [id])
  authorId     Int      
  file         String?  @db.VarChar(1023)
  image        String?  @db.Text 
  video        String?  @db.Text
  fileInd      String?  @db.VarChar(16)
  imageInd     String?  @db.VarChar(16)
  videoInd     String?  @db.VarChar(16)
  uploadTime   DateTime @default(now())
  lastUpdateTime DateTime @updatedAt
  desc         String?  @db.Text
  subscription UserSubscription[]
}

model UserSubscription {
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  content      Content  @relation(fields: [contentId], references: [id])
  contentId    Int     
  subscibeTime DateTime @default(now())
  @@id([userId, contentId])
}

model UserFollowed {
  id           Int      @id @default(autoincrement())
  user         User     @relation("FollowedBy", fields: [userId], references: [id])
  userId       Int      
  followedUser User     @relation("Following", fields: [followedUserId], references: [id])
  followedUserId Int
  followTime   DateTime @default(now())
}
